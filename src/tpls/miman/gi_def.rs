use crate::tpls::engine::render_template;
use anyhow::Result;
use serde::{Deserialize, Serialize};
const GI_TPL: &str = r#"// Code generated by whale_fall. DO NOT EDIT.
package {{pkg}}
import "sync"
var (
	once sync.Once
	{{#each list}}
	{{#if (ne new_returns_len 0)}}
	_{{name_val}}Instance *{{name}}
	{{else}}
	_{{name_val}}Instance *{{name}}
	{{/if}}
	{{/each}}
)

func _once() {
	once.Do(func() {
{{#each list}}
{{#if (ne new_returns_len 0)}}
	_{{name_val}}Instance = New{{name}}()
{{else}}
	_{{name_val}}Instance = &{{name}}{}
{{/if}}
{{/each}}
	})
}

{{#each list}}
func {{name}}Instance() *{{name}} {
	_once()
	return _{{name_val}}Instance
}
{{/each}}
"#;
#[derive(Debug, Serialize, Deserialize, Default)]
pub struct GItem {
    pub name: String,
    pub name_val: String,
    pub new_returns_len: usize,
}

#[derive(Debug, Serialize, Deserialize, Default)]
pub struct Gi {
    pub pkg: String,
    pub list: Vec<GItem>,
}

impl Gi {
    pub fn execute(&self) -> Result<String> {
        render_template(GI_TPL, self)
    }
}
